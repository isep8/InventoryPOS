unit uSiteTransfer;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls, DB, ffdb, Grids, DBGrids;

type
  TfrmSiteTransfer = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    lblCount: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label3: TLabel;
    DBGrid1: TDBGrid;
    edtRefNo: TEdit;
    mmoRemarks: TMemo;
    dsIn: TDataSource;
    tblOut: TffTable;
    tblOutItemCode: TStringField;
    tblOutBarcode: TStringField;
    tblOutDescription: TStringField;
    tblOutQty: TIntegerField;
    tblOutEnteredDT: TDateTimeField;
    tblOutEnteredBy: TStringField;
    tblOutEnteredProg: TStringField;
    tblOutShortDesc: TStringField;
    tblOutUnitPrice: TFloatField;
    tblOutTotalPrice: TFloatField;
    tblOutRefNo: TStringField;
    tblOutRemarks: TStringField;
    tblOutSourceCode: TStringField;
    tblOutSourceName: TStringField;
    tblBal: TffTable;
    tblBalItemCode: TStringField;
    tblBalBarcode: TStringField;
    tblBalDescription: TStringField;
    tblBalShortDesc: TStringField;
    tblBalBegQty: TIntegerField;
    tblBalStockIn: TIntegerField;
    tblBalStockOut: TIntegerField;
    tblBalStockEnd: TIntegerField;
    tblCard: TffTable;
    tblCardTransDate: TDateField;
    tblCardTransTime: TTimeField;
    tblCardTransCode: TStringField;
    tblCardItemCode: TStringField;
    tblCardBarcode: TStringField;
    tblCardDescription: TStringField;
    tblCardShortDesc: TStringField;
    tblCardStockIn: TIntegerField;
    tblCardStockOut: TIntegerField;
    tblCardRefNo: TStringField;
    tblCardTransType: TStringField;
    tblCardSourceCode: TStringField;
    tblCardSourceName: TStringField;
    tblCardBalance: TIntegerField;
    tblCardEnteredBy: TStringField;
    tblHdr: TffTable;
    tblHdrTransDate: TDateField;
    tblHdrTransTime: TTimeField;
    tblHdrTransType: TStringField;
    tblHdrSupplierCode: TStringField;
    tblHdrSupplierName: TStringField;
    tblHdrRefNo: TStringField;
    tblHdrRemarks: TStringField;
    tblHdrItemCount: TIntegerField;
    tblHdrTotalQty: TIntegerField;
    tblDet: TffTable;
    tblDetRefNo: TStringField;
    tblDetItemCode: TStringField;
    tblDetBarcode: TStringField;
    tblDetShortDesc: TStringField;
    tblDetDescription: TStringField;
    tblDetQty: TIntegerField;
    tblDetUnitPrice: TFloatField;
    tblDetTotalPrice: TFloatField;
    tblDetEnteredDT: TDateTimeField;
    tblDetEnteredYY: TIntegerField;
    tblDetEnteredMM: TIntegerField;
    tblDetEnteredDD: TIntegerField;
    tblDetEnteredBy: TStringField;
    tblDetTransType: TStringField;
    Panel1: TPanel;
    BitBtn1: TBitBtn;
    btnDelete: TBitBtn;
    btnSave: TBitBtn;
    btnClear: TBitBtn;
    Label7: TLabel;
    cboSite: TComboBox;
    tblRef: TffTable;
    tblRefLastTransferNo: TIntegerField;
    tblRefLastRefYY: TIntegerField;
    tblRefLastRefMM: TIntegerField;
    tblRefTransferPrefix: TStringField;
    tblCardDestinationCode: TStringField;
    tblCardDestinationName: TStringField;
    tblDetDestinationCode: TStringField;
    tblDetDestinationName: TStringField;
    lblSiteDescription: TLabel;
    procedure FormShow(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure btnClearClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    LintTotalQty: integer;
  end;

var
  frmSiteTransfer: TfrmSiteTransfer;

implementation

uses uSiteTransferQty, uSearchItems, DateUtils, uInterface, uMain;

{$R *.dfm}

procedure TfrmSiteTransfer.FormShow(Sender: TObject);
begin
    //set table name
    tblHdr.TableName:= frmMain.edtStockOutHeader.Text;
    tblDet.TableName:= frmMain.edtStockOutDetail.Text;
    tblCard.TableName:= frmMain.edtStockCard.Text;
    tblBal.TableName:= frmMain.edtStockBal.Text;

    //set temp reference no
    if not tblRef.Active then tblRef.Open;
    edtRefNo.Text:=  tblRefTransferPrefix.AsString + tblRefLastRefYY.AsString + Format('%.*d',[2, tblRefLastRefMM.AsInteger]) + '-' + Format('%.*d',[5, tblRefLastTransferNo.AsInteger + 1]);
    tblRef.Close;

    //open wf
    if not tblOut.Active then tblOut.Open;
    lblCount.Caption:= IntToStr(tblOut.RecordCount);
    if tblOut.RecordCount > 0 then
    begin
        messageDlg('Please finish your pending transaction!',mtInformation,[mbOk],0);
        exit;
    end;
end;

procedure TfrmSiteTransfer.BitBtn1Click(Sender: TObject);
begin
    frmSearchItems.edtSource.Text:= 'SITE TRANSFER';
    frmSearchItems.ShowModal;
end;

procedure TfrmSiteTransfer.btnDeleteClick(Sender: TObject);
begin
    if messageDlg('Delete item ' + tblOutItemCode.AsString + '?',mtConfirmation,[mbYes,mbNo],0)<>mrYes then
    begin
        exit;
    end;

    tblOut.Delete;
    lblCount.Caption:= IntToStr(tblOut.RecordCount);
end;

procedure TfrmSiteTransfer.btnSaveClick(Sender: TObject);
var intOutQty, intBegQty, intEndQty, intStockOutQty, intStockInQty: integer;
begin
    //validations
    if cboSite.Text = '' then
    begin
        messageDlg('Please select destination site!',mtError, [mbOk],0);
        cboSite.SetFocus;
        Exit;
    end;

    if trim(mmoRemarks.Text) = '' then
    begin
        messageDlg('Please input any remarks for this transaction!',mtError, [mbOk],0);
        mmoRemarks.SetFocus;
        Exit;
    end;

    //update Last reference no.
    if not tblRef.Active then tblRef.Open;
    tblRef.Edit;
    tblRefLastTransferNo.Value:= tblRefLastTransferNo.Value + 1;
    tblRef.Post;
    edtRefNo.Text:= tblRefTransferPrefix.AsString + tblRefLastRefYY.AsString + Format('%.*d',[2, tblRefLastRefMM.AsInteger]) + '-' + Format('%.*d',[5, tblRefLastTransferNo.AsInteger]);

    //insert detail
    LintTotalQty:= 0;
    if not tblDet.Active then tblDet.Open;
    tblOut.First;
    while not tblOut.Eof do
    begin
        LintTotalQty:= LintTotalQty + tblOutQty.AsInteger;
       //update 'balance' header
        if not tblBal.Active then tblBal.Open;
        tblBal.IndexFieldNames:= 'ItemCode';
        if not tblBal.FindKey([tblOutItemCode.AsString]) then
        begin
            //insert to stock header
            intEndQty:= tblOutQty.Value;
            tblBal.Insert;
            tblBal.FieldByName('ItemCode').Value:= tblOut.FieldByName('ItemCode').Value;
            tblBal.FieldByName('Barcode').Value:= tblOut.FieldByName('Barcode').Value;
            tblBal.FieldByName('Description').Value:= tblOut.FieldByName('Description').Value;
            tblBal.FieldByName('ShortDesc').Value:= tblOut.FieldByName('ShortDesc').Value;
            tblBalBegQty.Value:= 0;
            tblBal.FieldByName('StockIn').Value:= 0;
            tblBal.FieldByName('StockOut').Value:= (tblOutQty.Value * -1);
            tblBal.FieldByName('StockEnd').Value:= intEndQty * -1;
            tblBal.Post;
        end
        else
        begin
            //if exists in current month, update stockin qty plus new qty
            intOutQty:= tblOutQty.Value;
            intStockOutQty:= tblBalStockOut.Value;
            intStockInQty:= tblBalStockIn.Value;
            intBegQty:= tblBalBegQty.Value;
            intEndQty:= (intBegQty + intStockInQty) - (intStockOutQty + intOutQty);
            tblBal.Edit;
            tblBal.FieldByName('StockOut').Value:= intStockOutQty + intOutQty;
            tblBal.FieldByName('StockEnd').Value:= intEndQty;
            tblBal.Post;
        end;

        //insert to detail
        tblDet.Insert;
        tblDet.FieldByName('RefNo').Value:= tblOutRefNo.Value;
        tblDet.FieldByName('TransType').Value:= 'SITE TRANSFER';
        tblDet.FieldByName('DestinationCode').Value:= cboSite.Text;
        tblDet.FieldByName('DestinationName').Value:= lblSiteDescription.Caption;
        tblDet.FieldByName('ItemCode').Value:= tblOut.FieldByName('ItemCode').Value;
        tblDet.FieldByName('Barcode').Value:= tblOut.FieldByName('Barcode').Value;
        tblDet.FieldByName('ShortDesc').Value:= tblOut.FieldByName('ShortDesc').Value;
        tblDet.FieldByName('Description').Value:= tblOut.FieldByName('Description').Value;
        tblDet.FieldByName('Qty').Value:= tblOut.FieldByName('Qty').Value;
        tblDet.FieldByName('UnitPrice').Value:= 0;
        tblDet.FieldByName('TotalPrice').Value:= 0;
        tblDet.FieldByName('EnteredDT').Value:= now;
        tblDet.FieldByName('EnteredYY').Value:= YearOf(now);
        tblDet.FieldByName('EnteredMM').Value:= MonthOf(now);
        tblDet.FieldByName('EnteredDD').Value:= DayOf(now);
        tblDet.FieldByName('EnteredBy').Value:= gsUserID;
        tblDet.Post;

        //Insert in StockCard
        if not tblCard.Active then tblCard.Open;
        tblCard.Insert;
        tblCardTransDate.Value:= now;
        tblCardTransTime.Value:= now;
        tblCardTransCode.Value:= 'OUT';
        tblCardTransType.Value:= 'SITE TRANSFER';
        tblCardDestinationCode.Value:= cboSite.Text;
        tblCardDestinationName.Value:= lblSiteDescription.Caption;
        tblCardItemCode.Value:= tblOutItemCode.Value;
        tblCardBarcode.Value:= tblOutBarcode.Value;
        tblCardDescription.Value:= tblOutDescription.Value;
        tblCardShortDesc.Value:= tblOutShortDesc.Value;
        tblCardStockIn.Value:= 0;
        tblCardStockOut.Value:= tblOutQty.Value * -1;
        tblCardBalance.Value:= intEndQty;
        tblCardRefNo.Value:= edtRefNo.Text;
        tblCardEnteredBy.Value:= gsUserID;
        tblCard.Post;
    tblOut.Next;
    end;

    //insert header
    if not tblHdr.Active then tblHdr.Open;
    tblHdr.Insert;
    tblHdrTransDate.Value:= now;
    tblHdrTransType.Value:= 'SITE TRANSFER';
    tblHdrRefNo.Value:= edtRefNo.Text;
    tblHdrItemCount.Value:= tblOut.RecordCount;
    tblHdrTotalQty.Value:= LintTotalQty;
    tblHdrRemarks.Value:= mmoRemarks.Text;
    tblHdr.Post;
    
    messageDlg('Item successfully transferred!',mtInformation,[mbOk],0);

    //re-initialize variables
    cboSite.ItemIndex:= -1;
    mmoRemarks.Text:= '';
    tblOut.DeleteRecords;

    //reset reference no
    if not tblRef.Active then tblRef.Open;
    edtRefNo.Text:= tblRefTransferPrefix.AsString + tblRefLastRefYY.AsString + Format('%.*d',[2, tblRefLastRefMM.AsInteger]) + '-' + Format('%.*d',[5, tblRefLastTransferNo.AsInteger + 1]);

end;

procedure TfrmSiteTransfer.btnClearClick(Sender: TObject);
begin
    //confirmation
    if messageDlg('This will clear all items in the list, Continue?',mtConfirmation,[mbYes,mbNo],0)=mrNo then
    begin
        exit;
    end;

    //clear items
    tblOut.DeleteRecords;
    messageDlg('Items deleted!',mtInformation,[mbOk],0);
end;

end.
